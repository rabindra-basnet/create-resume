# name: Deploy Next.js site to GitHub Pages

# on:
#   push:
#     branches: ["main"]
#   workflow_dispatch:

# permissions:
#   contents: read
#   pages: write
#   id-token: write

# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Detect package manager
#         id: detect-package-manager
#         run: |
#           if [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
#             echo "manager=pnpm" >> $GITHUB_OUTPUT
#             echo "command=install" >> $GITHUB_OUTPUT
#             echo "runner=pnpm" >> $GITHUB_OUTPUT
#           elif [ -f "${{ github.workspace }}/yarn.lock" ]; then
#             echo "manager=yarn" >> $GITHUB_OUTPUT
#             echo "command=install" >> $GITHUB_OUTPUT
#             echo "runner=yarn" >> $GITHUB_OUTPUT
#           elif [ -f "${{ github.workspace }}/package.json" ]; then
#             echo "manager=npm" >> $GITHUB_OUTPUT
#             echo "command=ci" >> $GITHUB_OUTPUT
#             echo "runner=npx --no-install" >> $GITHUB_OUTPUT
#           else
#             echo "Unable to determine package manager"
#             exit 1

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: "20"
#           cache: ${{ steps.detect-package-manager.outputs.manager }}

#       - name: Install pnpm
#         if: ${{ steps.detect-package-manager.outputs.manager == 'pnpm' }}
#         run: npm install -g pnpm

#       - name: Restore Next.js cache
#         uses: actions/cache@v4
#         with:
#           path: .next/cache
#           key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml', '**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx') }}
#           restore-keys: |
#             ${{ runner.os }}-nextjs-

#       - name: Install dependencies
#         run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

#       - name: Build Next.js app
#         run: ${{ steps.detect-package-manager.outputs.runner }} next build && ${{ steps.detect-package-manager.outputs.runner }} next export

#       - name: Upload static site
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: ./out

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     steps:
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4


name: Deploy Next.js site to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build and export Next.js app
        run: |
          pnpm next build
          pnpm next export

      - name: Upload static site
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
